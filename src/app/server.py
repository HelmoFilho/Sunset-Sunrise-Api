## -- Importing External Modules -- ##
from fastapi.exceptions import RequestValidationError
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
from fastapi.encoders import jsonable_encoder
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from timeit import default_timer as timer
import os

## -- Importing Internal Modules -- ##
import config as cnfg

### ==== Master ==== ###

## Creating the app
app = FastAPI(
    docs_url = "/docs" if cnfg.SHOW_DOC else None,
    redoc_url =  "/redoc" if cnfg.SHOW_DOC else None,
)


## Documentation
description = """

# Introduction

Api Created for testing the sunrise-sunset api with fastapi


## Description

This microservice is responsible for providing information about the time remaining until the next sunrise or sunset
for the America/Fortaleza Timezone.
To accomplish this task, this api consults a public sunset/sunrise API, the documentation for which is 
provided at the following URL: https://sunrise-sunset.org/api


## Responses

The responses of this api will ALWAYS have this structure:

    {
        "description": "response description"
    }

The status code of the response will dictate the type of response:

    * Status code: 200
        - description: Success
        - On this specific case the response will have an additional field

            {
                "description": "response description",
                "data": {request response data}
            }

    * Status code: 400
        - description: Generic Error

    * Status code: 422
        - description: Body Json Error

    * Status code: 500
        - description: Internal server error


## Cross-Origin Resource Sharing

This API has Cross-Origin Resource Sharing (CORS) implemented in accordance with the [W3C] specification (https://www.w3.org/TR/cors/).
This allows communication between browser domains.
All responses have a same-origin wildcard (*) which makes them completely public and accessible to everyone, including any code on any site.


## OpenAPI
This documentation was created using the **OpenAPI** format where it is automatically generated by the
by the FastAPI framework. The documentation has two different looks:

- Swagger Format
    - Utilizing the endpoint "/docs"

- Redoc Format
    - Utilizing the endpoint "/redoc"

    
# Endpoints
"""

def custom_openapi():

    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title = "API SUNSET-SUNRISE",
        version = "1.0.0",
        description = description,
        routes = app.routes,
    )
    openapi_schema["info"]["x-logo"] = {
        "url": "static/images/logo.jpg",
        "altText": 'Sunset Sunrise',
    }

    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi
if os.path.exists("src/app/static"):
    app.mount("/static", StaticFiles(directory="src/app/static"), name="static")


## Middlewares

### Before e After request
@app.middleware("http")
async def request_middleware(request: Request, call_next):

    start_time = timer()

    # Request
    response = await call_next(request)

    # After request
    finish_time = timer()
    
    response.headers["X-Process-Time"] = f"{(finish_time - start_time):.5f}s"

    return response


### Cors
app.add_middleware(
    CORSMiddleware,
    allow_origins = ["*"],
    allow_credentials = True,
    allow_methods = ["*"],
    allow_headers = ["*"],
)


## Handlers

### Exception Handler
@app.exception_handler(Exception)
async def exception_handler(request: Request, err: Exception):

    content = {"description": "Internal server error"}
    
    return JSONResponse(
        content = content,
        status_code = 500,
    )


### HTTP Exception Handler
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, err: HTTPException):

    if isinstance(err.detail, dict):
        description = err.detail.get("msg")

    elif isinstance(err.detail, str):
        description = err.detail

    else:
        description = "An error occurred"
    
    msg = {
        "description": description,
    }

    return JSONResponse(
        content = jsonable_encoder(msg),
        status_code = err.status_code,
    )


### Validation Error
@app.exception_handler(RequestValidationError)
async def request_validation_error_handler(request: Request, err: Exception):

    headers = request.headers

    content = {"description": "Request validation error",
               "details": jsonable_encoder(err.errors())}
    
    return JSONResponse(
        content = content,
        status_code = 422,
    )

